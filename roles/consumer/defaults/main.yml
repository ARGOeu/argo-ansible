---

tenants:
  TenantA:
    topics:
      - "probe.metricOutput.tenantA.ngi.*"
      - "probe.metricOutput.tenantA.roc.*"
      - "probe.metricOutput.tenantA.opsmonitor.*"
      - "probe.metricOutput.tenantA.project.*"
      - "probe.metricOutput.tenantA.vo.*"
    brokers:
      - "broker1.example.com"
      - "broker2.example.com"
    outputdir: "/var/lib/argo-connectors/TenantA/"
    jobs_all: "JOB_TenantA_ALL, JOB_TenantA_PART"
    prefilter: "prefilter-tenantA.py"
    jobs_details:
      - name: "JOB_TenantA_ALL"
        Directory: "TenantA_ALL"
        Profiles: "ALL_SERVICES"
        TopoType: "GOCDB"
        TopoFeed: "https://goc.example.com/gocdbpi/"
        TopoFetchType: "Sites"
        TopoSelectGroupOfEndpoints: "Production:Y, Monitored:Y, Scope:TenantA"
        TopoSelectGroupOfGroups: "Certification:Certified, Infrastructure:Production, Scope:TenantA"
        DowntimesFeed: "https://goc.example.com/gocdbpi/"
      - name: "JOB_TenantA_PART"
        Directory: "TenantA_PART"
        Profiles: "PART_SERVICES"
        TopoType: "GOCDB"
        TopoFeed: "https://goc.example.com/gocdbpi/"
        TopoFetchType: "Sites"
        TopoSelectGroupOfEndpoints: "Production:Y, Monitored:Y, Scope:TenantA"
        TopoSelectGroupOfGroups: "Certification:Candidate, Infrastructure:Production, Scope:TenantA"
        DowntimesFeed: "https://goc.example.com/gocdbpi/"
  TenantB:
    topics:
      - "probe.*"
    brokers:
      - "broker3.example.com"
    outputdir: "/var/lib/argo-connectors/TenantB/"
    jobs_all: "JOB_TenantB_SERVICES"
    jobs_details:
      - name: "JOB_TenantB_SERVICES"
        Directory: "SERVICES"
        Profiles: "My_Critical_Services"
        TopoType: "GOCDB"
        TopoFeed: "https://goc.example.com/gocdbpi/"
        TopoFetchType: "ServiceGroups"
        TopoSelectGroupOfEndpoints: "Production:Y, Monitored:Y, Scope:TenantB"
        TopoSelectGroupOfGroups: "Certification:Candidate, Infrastructure:Production, Scope:TenantB"
        DowntimesFeed: "https://goc.example.com/gocdbpi/"

poem_servers:
  - host: "poemA.example.com"
    vos:
      - ops
      - gridpp
  - host: "poemB.example.com"
    vos:
      - ops

poem_fetch_profiles:
  - profile_1
  - profile_2

mongo_host_or_ip: "127.0.0.1"
mongo_port_number: "27017"
argo_compute_mode: "local"
prefilter_clean_bool: "false"
consumer_path: "/var/lib/argo-egi-consumer"
argo_sync_conf_path: "/etc/argo-egi-connectors"
argo_sync_path: "/var/lib/argo-connectors"
argo_exec_path: "/usr/libexec/argo-egi-connectors"
