---

- name: Install avro from ar project
  tags: ar-packages
  yum: name=avro state=present enablerepo={{ enabled_argo_repo }}

- name: Install python-pip
  tags: ar-packages
  yum: name=python-pip state=present

- name: Install pymongo fixed version
  tags: ar-packages
  pip: name=pymongo state=present version=3.2.2

- name: Install egi consumer package from ar project
  tags: 
    - ar-packages
    - consumer_config
  yum: name=argo-egi-consumer state=latest enablerepo={{ enabled_argo_repo }} update_cache=yes
  notify: restart all consumers

- name: Create consumer configuration directories
  file: path=/etc/argo-{{ item.key | lower }}-consumer
        state=directory
        owner=root group=root mode=0755
  with_dict: tenants
  notify: restart all consumers

- name: Copy metric avro specification for each tenant
  tags: 
    - consumer_config
  template: src=metric_data.avsc.j2
            dest=/etc/argo-{{ item.key | lower }}-consumer/metric_data.avsc
            owner=root group=root mode=0644
  with_dict: tenants
  notify: restart all consumers

- name: Create consumer output directories per tenant
  tags: consumer_config
  file: path=/var/lib/argo-{{ item.key | lower }}-consumer
        state=directory
        owner=arstats group=arstats mode=0755
  with_dict: tenants

- name: Consumer configuration
  tags: 
    - consumer_config
  template: src=consumer.conf.j2
            dest=/etc/argo-{{ item.key | lower }}-consumer/consumer.conf
            owner=root group=root mode=0644
  with_dict: tenants
  notify: restart all consumers

# TODO: Make following task tenant unaware
- name: Copy out init scripts for non egi consumers
  tags: 
    - consumer_config
  template: src=consumer.init.j2
            dest=/etc/init.d/argo-{{ item.key | lower }}-consumer
            owner=root group=root mode=0755
  with_dict: tenants
  when: item.key|lower != "egi"
  notify: restart all non egi consumers

# TODO: Make following task tenant unaware
- name: Create copies of python wrappers for non egi consumers
  tags: 
    - consumer_config
  file: path=/usr/bin/argo-{{ item.key | lower }}-wrapper-consumer.py
        state=link src=/usr/bin/argo-egi-consumer.py
  with_dict: tenants
  when: item.key|lower != "egi"

- name: Enable and start consumer services
  tags: 
    - consumer_config
  service: name=argo-{{ item.key | lower }}-consumer enabled=on state=started
  with_dict: tenants

- name: Install argo-egi-connectors from ar project
  tags: 
    - ar-packages
    - connectors
  yum: name=argo-egi-connectors state=latest enablerepo={{ enabled_argo_repo }} update_cache=yes

- name: Configure connectors
  tags: 
    - connectors_config
    - connectors
  template: src=customer.conf.j2
            dest=/etc/argo-egi-connectors/{{ item.key | lower }}-customer.conf
            owner=root group=root mode=0644
            backup=yes
  with_dict: tenants
  
- name: Configure global connectors
  tags: 
    - connectors_config
    - connectors
  template: src=global.conf.j2
            dest=/etc/argo-egi-connectors/global.conf
            owner=root group=root mode=0644
            backup=yes
  with_dict: tenants

- name: POEM configuration
  tags:
    - connectors_config
    - poem_config
  template: src=poem-connector.conf.j2
            dest=/etc/argo-egi-connectors/poem-connector.conf
            owner=root group=root mode=0644
            backup=yes


- name: Install ar-compute from ar project
  tags: ar-packages
  yum: name=ar-compute state=latest enablerepo={{ enabled_argo_repo }} update_cache=yes

- name: Copy out compute engine configuration file
  tags: ce_config
  template: src=ar-compute-engine.conf.j2
            dest=/etc/ar-compute-engine.conf
            owner=root group=root mode=0644
            backup=yes

- name: Configure ar-compute job cycle daily cron 
  tags: compute_config
  cron: cron_file=ar_job_cycle_daily
        user=root
        name=job_cycle_daily
        state=present
        minute=0
        hour=0
        job="/usr/libexec/ar-compute/bin/job_cycle.py -d $(/bin/date --utc --date '-1 day' +\%Y-\%m-\%d)"


- name: Install ar-data-retention from ar project
  tags: ar-data-retention
  yum: name=ar-data-retention state=latest enablerepo={{ enabled_argo_repo }} update_cache=yes

- name: Parametrize data retention policies
  tags: data_retention
  template: src=ar-data-retention.conf.j2
            dest=/etc/ar-data-retention/ar-data-retention.conf
            owner=root group=root mode=0644

- name: Configure hadoop (mr) related parameter files
  tags: hadoop_client_config
  template: src={{ item }}.j2
        dest=/etc/hadoop/conf/{{ item }} backup=yes
        owner=root group=root mode=0644
  with_items:
    - core-site.xml
    - hdfs-site.xml
    - log4j.properties
    - mapred-site.xml
    - ssl-client.xml
    - topology.map

    
- name: Copy out compute engine jobs configuration files
  tags: ce_config_2
  template: src=ar-compute/{{ item }} 
        dest=/etc/ar-compute/{{ item | basename | regex_replace('\.j2','') }}
        owner=root group=root mode=0644
        backup=yes
  with_fileglob:
    - /../templates/ar-compute/*.j2
        
- name: Configure hadoop (mr) related parameter files
  tags: hadoop_client_config
  copy: src={{ item }}
        dest=/etc/hadoop/conf/{{ item }} backup=yes
        owner=root group=root mode=0644
  with_items:
    - hadoop-env.sh
    - topology.py

- name: Configure pig related parameter
  tags: pig_client_config
  lineinfile: dest=/etc/pig/conf/pig.properties
              regexp="^pig.logfile"
              line="pig.logfile=/tmp/pig-err.log"
              state=present
              backup=yes

- name: Insert comment for pig related parameter
  tags: pig_client_config
  lineinfile: dest=/etc/pig/conf/pig.properties
              regexp="^# File Parameter"
              insertbefore="^pig.logfile"
              line="# File Parameter for pig exception dump."
              state=present
              backup=yes

- include: 'cron_jobs.yml'