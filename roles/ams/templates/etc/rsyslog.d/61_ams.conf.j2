# {{ ansible_managed }}

 
# AMS templates
template(name="ams-logs"           type="string"  string="/var/log/argo_messaging/ams.log")
template(name="ams-traffic-logs"   type="string"  string="/var/log/argo_messaging/ams-traffic.log")
template(name="ams-backend-logs"   type="string"  string="/var/log/argo_messaging/ams-backend.log")
template(name="ams-error-logs"     type="string"  string="/var/log/argo_messaging/ams-error.log")


# Local logs
if ($programname contains "argo_messaging" and $msg contains "type=backend_log") then {
  action(type="omfile"
  name="AMS-Backend"
  dynaFile="ams-backend-logs"
  queue.type="LinkedList"
  queue.filename="queue_AMS_backend"
  queue.size="100000"
  action.resumeRetryCount="-1"
  queue.saveonshutdown="on"
  )
  & stop
}

if ($programname contains "argo_messaging" and $msg contains "type=request_log" and $msg contains 'level=error') then {
  action(type="omfile"
  name="AMS-Error"
  dynaFile="ams-error-logs"
  queue.type="LinkedList"
  queue.filename="queue_AMS_error"
  queue.size="100000"
  action.resumeRetryCount="-1"
  queue.saveonshutdown="on"
  )
  & stop
}

if ($programname contains "argo_messaging" and $msg contains "type=request_log" ) then {
  action(type="omfile"
  name="AMS-Traffic"
  dynaFile="ams-traffic-logs"
  queue.type="LinkedList"
  queue.filename="queue_AMS_traffic"
  queue.size="100000"
  action.resumeRetryCount="-1"
  queue.saveonshutdown="on"
  )
  & stop
}

if ($programname contains "argo_messaging") then {
  action(type="omfile"
  name="AMS"
  dynaFile="ams-logs"
  queue.type="LinkedList"
  queue.filename="queue_AMS"
  queue.size="100000"
  action.resumeRetryCount="-1"
  queue.saveonshutdown="on"
  )
  & stop
}


# Send ARGO-Messaging logs.
## https://www.rsyslog.com/doc/master/configuration/modules/imfile.html
## https://www.rsyslog.com/doc/master/configuration/actions.html
## https://www.rsyslog.com/doc/master/configuration/templates.html
## https://www.rsyslog.com/doc/master/concepts/queues.html
## https://www.rsyslog.com/doc/master/rainerscript/queue_parameters.html


ruleset(name="fwdamstocentrallog"){
            action(type="omfwd"
            name="ams"
            template="RSYSLOG_TraditionalForwardFormat"
            queue.type="LinkedList" # In Memory Queue
            queue.filename="fwd_q_ams" # File name to be used for the queue files.
            queue.size="100000" # The maximum size of the queue in number of messages.
            action.resumeRetryCount="-1" # Sets how often an action is retried before it is considered to have failed. Failed actions discard messages. (-1 means eternal)
            queue.saveonshutdown="on" # This parameter specifies if data should be saved at shutdown.
            Target="{{ central_rsyslog.hostname }}" Port="{{ central_rsyslog.port }}" Protocol="tcp"
            StreamDriver="gtls"
            StreamDriverMode="1" # run driver in TLS-only mode
            StreamDriverAuthMode="x509/name"
            StreamDriverPermittedPeers="{{ central_rsyslog.permittedPeers }}"
            )
}

input(type="imfile"
      File="/var/log/argo_messaging/*log"
      Tag="ams:"
      ruleset="fwdamstocentrallog"
)


