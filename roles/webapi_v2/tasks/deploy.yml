---

# Set timezone
- name: Set timezone to Europe/Athens
  timezone:
    name: Europe/Athens

# Firewall Rules argo-web-api, mongo trusted

- name: Create firewall new zones
  command: firewall-cmd --permanent --new-zone="{{item}}"
  with_items: "{{firewall_zones}}"
  notify: reload firewall
  when: firewall_zones is defined
  tags: firewall
  ignore_errors: yes

- name: Create firewall new services
  command: firewall-cmd --permanent --new-service="{{item.name}}"
  with_items: "{{firewall_services}}"
  notify: reload firewall
  when: firewall_services is defined
  tags: firewall
  ignore_errors: yes

- name:  Add port to services
  command: firewall-cmd --permanent --service="{{item.name}}" --add-port={{item.port}}
  with_items: "{{firewall_services}}"
  notify: reload firewall
  when: firewall_services is defined
  tags: firewall
  ignore_errors: yes

- name: Firewall add services to zones
  firewalld:
    zone: "{{item.zone}}"
    service: "{{item.service}}"
    permanent: true
    state: enabled
  with_items: "{{firewall_services_zones}}"
  when: firewall_services_zones is defined
  tags: firewall
  notify: reload firewall

- name: Add sources to zones
  firewalld:
    zone: "{{item.zone}}"
    source: "{{item.source}}"
    permanent: true
    state: enabled
  with_items: "{{firewall_sources}}"
  when: firewall_sources is defined
  tags: firewall
  notify: reload firewall

- name: Add interfaces to zones
  firewalld:
    zone: "{{item.zone}}"
    interface: "{{item.interface}}"
    permanent: true
    state: enabled
  with_items: "{{firewall_interfaces}}"
  when: firewall_interfaces is defined
  tags: firewall
  notify: reload firewall


# Install Mongo

- name: Install mongodb repo
  tags: mongo
  copy: src=etc/yum.repos.d/mongodb_3.repo
        dest=/etc/yum.repos.d/mongodb_3.repo backup=no
        owner=root group=root mode=0644

- name: Install mongoDB packages
  tags: mongo
  yum: name={{ item }} state=present
  with_items:
    - mongodb-org-3.0.7
    - mongodb-org-server-3.0.7
  when: ansible_distribution == 'CentOS' and ansible_distribution_major_version == '6'

- name: Install mongoDB packages
  tags:  mongo
  yum: name={{ item }} state=present
  with_items:
    - mongodb-org
    - mongodb-org-server
  when: ansible_distribution == 'CentOS' and ansible_distribution_major_version == '7'

- name: Bind mongod processes to one or more interfaces
  lineinfile: >
              dest=/etc/mongod.conf
              regexp="\ \ bindIp"
              line='  bindIp: {{ mongo_bind_interfaces }}'
              state=present
              backup=yes
  notify: restart mongo
  tags: mongo

- name: Fix issue with mongo init script
  lineinfile: >
              dest=/etc/mongod.conf
              regexp="\ \ pidFilePath"
              line='  pidFilePath: /var/run/mongodb/mongod.pid'
              state=present
              backup=yes
  notify: restart mongo
  tags: mongo

- name: Increase soft nproc limits
  copy: src=etc/security/limits.d/99-mongodb-nproc.conf
        dest=/etc/security/limits.d/99-mongodb-nproc.conf backup=no
        owner=root group=root mode=0644
  tags: mongo

- name: Enable and start mongoDB
  service: name=mongod enabled=yes state=started enabled=True
  tags: mongo


# Install Web Api

- name: Install argo repository definitions
  tags: argo_repo
  template: src=argo-centos7.repo.j2
            dest=/etc/yum.repos.d/argo.repo backup=no
            owner=root group=root mode=0644
  when: ansible_distribution == 'CentOS' and ansible_distribution_major_version == '7'
  tags: api

- name: Install argo-web-api package
  yum: name=argo-web-api state=latest enablerepo={{ enabled_argo_repo }} update_cache=yes
  notify: restart argo-web-api service
  tags: api

- name: setup argo-web-api group
  group: name=argo-web-api system=yes
  tags: api

- name: Setup argo-web-api user
  user: name=argo-web-api system=yes group=argo-web-api
  tags: api

- name: Create data_dir
  file: path=/var/ww/argo-web-api state=directory owner=argo-web-api group=argo-web-api mode=755
  tags: api

- name: Create cert dir
  file: path=/var/www/argo-web-api/certs state=directory owner=argo-web-api group=argo-web-api mode=755
  tags: api

- name: Copy localhost key
  copy:
    src: /etc/pki/tls/private/localhost.key
    dest: /var/www/argo-web-api/certs
    owner: argo-web-api
    group: argo-web-api
  tags: api

- name: Copy localhost cert
  copy:
    src: /etc/pki/tls/certs/localhost.crt
    dest: /var/www/argo-web-api/certs
    owner: argo-web-api
    group: argo-web-api
  tags: api


- name: allow bind port 443
  shell: setcap 'cap_net_bind_service=+ep' /var/www/argo-web-api/argo-web-api
  tags: api

- name: Configure argo-web-api
  template: src=argo-web-api.conf.j2
            dest=/etc/argo-web-api.conf backup=yes
            owner=root group=root mode=0644
  notify: restart argo-web-api service
  tags: api

- name: Setup argo-web-api service
  template: dest="/etc/systemd/system/argo-web-api.service" src=argo-web-api.service.j2
  register: argowebapi_service
  tags: api

- name: reload systemd
  command: /usr/bin/systemctl --system daemon-reload
  when: argowebapi_service | changed
  tags: api

- name: Start web api service
  service: name=argo-web-api state=started enabled=True
  tags: api
