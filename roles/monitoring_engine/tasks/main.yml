---

- name: Install Nagios
  yum: name=nagios state=latest enablerepo=nagios
  tags: install

- name: Install pnp4nagios
  yum: name=pnp4nagios state=latest
  tags: install

- name: Install Apache and mod_ssl
  yum: name={{ item }} state=latest
  with_items:
    - httpd
    - mod_ssl
  tags: install

- name: Install fetch-crl
  yum: name=fetch-crl state=latest
  when: ca_bundle_install
  tags: install

- name: Install NCG and MSG conponents
  yum: name={{ item.name }} state=latest enablerepo={{ item.repo }}
  with_items: nagios_components
  tags: install

- name: Install Nagios plugins
  yum: name={{ item.name }} state=latest enablerepo={{ item.repo }}
  with_items: nagios_plugins
  tags: install

- name: Copy nagios.cfg file
  template: src=nagios.cfg.j2
            dest=/etc/nagios/nagios.cfg
            owner=nagios group=nagios mode=0644
  notify: reload nagios
  tags: config

- name: Copy cgi.cfg file
  template: src=cgi.cfg.j2
            dest=/etc/nagios/cgi.cfg
            owner=nagios group=nagios mode=0644
  notify: reload nagios
  tags: config

#FIXME: Make this tenant unaware
- name: Copy ncg.conf file for EGI
  template: src=ncg.conf.j2
            dest=/etc/argo-ncg/ncg.conf
            owner=root group=root
  when: tenant_name|lower == "egi"
  notify: reload nagios
  tags: config

- name: Copy ncg.conf file for EUDAT
  template: src=ncg.conf.eudat.j2
            dest=/etc/ncg/ncg.conf
            owner=root group=root
  when: tenant_name|lower == "eudat"
  notify: reload nagios
  tags: config

- name: Copy argo-voms-htpasswd.conf file
  template: src=argo-voms-htpasswd.conf.j2
            dest=/etc/argo-voms-htpasswd/argo-voms-htpasswd.conf
            owner=root group=root
  when: voms_htpasswd is defined
  tags: config

#FIXME: Temp workaround for tenants without BDII infrastructure.
- name: Copy broker-list file
  template: src=broker-list.j2
            dest=/var/cache/msg/broker-cache-file/broker-list
            owner=root group=root mode=0644
  when: broker_host is defined
  tags: config
##

- name: Copy argo-msg-cache file
  template: src=argo-msg-cache.conf.j2
            dest=/etc/argo-msg-cache.conf
            owner=root group=root
  when: lcg_gfal_infosys is defined and broker_network is defined
  tags: config

- name: Create unicore log dir
  file: path=/var/log/unicore
        state=directory 
        owner=nagios group=nagios mode=0755
  when: enable_unicore_probes is defined and enable_unicore_probes == "1"
  tags: config

- name: Copy ucc.config file for unicore
  template: src=ucc.config.j2
            dest=/etc/nagios/unicore/ucc.config
            owner=nagios group=nagios mode=0400
  when: enable_unicore_probes is defined and enable_unicore_probes == "1"
  tags: config

- name: Copy scripts for unicore credentials
  template: src={{ item }}.j2
            dest=/usr/local/bin/{{ item }} 
            owner=root group=root mode=0744
  with_items:
    - unicore_jks.sh
    - unicore_ks.sh
    - unicore_ts.sh
  when: enable_unicore_probes is defined and enable_unicore_probes == "1"
  tags: config

- name: Execute scripts for unicore credentials
  command: /usr/local/bin/{{ item }}
  with_items:
    - unicore_jks.sh
    - unicore_ks.sh
    - unicore_ts.sh
  when: enable_unicore_probes is defined and enable_unicore_probes == "1"
  tags: config

- name: Create vomses dir
  file: path=/etc/vomses 
        state=directory 
        owner=root group=root mode=0755
  when: vomses is defined
  tags: config

- name: Copy vomses files
  template: src=vomses.j2
            dest=/etc/vomses/{{ item.name }}
            owner=root group=root mode=0644
  when: vomses is defined
  with_items: vomses
  tags: config

- name: Create voms lsc dir
  file: path=/etc/grid-security/vomsdir/{{ item.vo }}
        state=directory 
        owner=root group=root mode=0755
  when: vomses is defined
  with_items: vomses
  tags: config

- name: Create voms lsc files
  template: src=voms_lsc.j2
            dest=/etc/grid-security/vomsdir/{{ item.vo }}/{{ item.server }}.lsc
            owner=root group=root mode=0644
  when: vomses is defined
  with_items: vomses
  tags: config

- name: Create sha checksum for dashboard config
  shell: echo -n {{ nagios_server }} | sha1sum | cut -f1 -d' '
  register: sha
  tags: config
  
- name: Create dashboard config for msg-to-handler
  template: src=dashboard.conf.j2
            dest=/etc/msg-to-handler.d/DASHBOARD.conf
            owner=root group=root mode=0644
  when: send_to_dashboard is defined and send_to_dashboard == "1"
  tags: config

- name: Create apel config for msg-to-handler
  template: src=apel.conf.j2
            dest=/etc/msg-to-handler.d/APEL.conf
            owner=root group=root mode=0644
  when: send_to_apel is defined and send_to_apel == "1"
  tags: config

- name: Create a cron job to restart apache 
  cron: name=restart_httpd 
        user="root"
        minute="53" hour="2,8,14,20" 
        job="( /sbin/service httpd status && /sbin/service httpd graceful ) > /dev/null 2>&1" 
  when: ca_bundle_install
  tags: config

- name: create apache nagios conf
  template: src=nagios_apache.conf.j2
            dest=/etc/httpd/conf.d/nagios.conf
            owner=root group=root mode=0644
  notify: reload httpd
  when: configure_nagios_apache
  tags: config

- name: create apache ssl conf
  template: src=ssl.conf.j2
            dest=/etc/httpd/conf.d/ssl.conf
            owner=root group=root mode=0644
  notify: reload httpd
  when: configure_apache_ssl
  tags: config

- name: Enable nagios and httpd on boot and start service
  service: name={{ item }} state=started enabled=yes
  with_items:
    - nagios
    - httpd
  tags: config

- name: Start fetch-crl cron
  service: name=fetch-crl-cron state=started enabled=yes
  when: ca_bundle_install
  tags: config

- name: Start fetch-crl boot
  service: name=fetch-crl-boot state=started enabled=no
  when: ca_bundle_install
  ignore_errors: yes
  tags: config

- name: Enable argo-voms-htpasswd on boot and start service
  service: name=argo-voms-htpasswd state=started enabled=yes
  when: voms_htpasswd is defined
  tags: config

- name: Enable argo-msg-cache on boot and start service
  service: name=argo-msg-cache state=started enabled=yes
  when: lcg_gfal_infosys is defined
  tags: config
  
