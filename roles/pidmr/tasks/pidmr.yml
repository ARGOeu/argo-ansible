---
# tasks file for pid metaresolver service installation


- name: Ensure group "{{ pidmr_group }}" exists
  group:
    name: "{{ pidmr_group }}"
    state: present
  tags:
    - pidmr
    - pidmr-user

- name: Add user "{{ pidmr_user }}"
  user:
    name: "{{ pidmr_user }}"
    groups: "{{ pidmr_group }}"
    append: yes
    create_home: no
    shell: /sbin/nologin
    comment: pidmr nologin user
  tags:
    - pidmr
    - pidmr-user


- name: Install Java 11
  yum:
    name: "{{ packages }}"
    state: latest
  vars:
    packages:
    - java-11-openjdk
    - java-11-openjdk-devel
  tags:
    - pidmr
    - pidmr-packages
    - pidmr-java
    - pidmr-maven

- name: Create systemd file for pid metaresolver service
  template:
   src: pidmr.service.j2
   dest: /etc/systemd/system/pidmr.service
   owner: root
   group: root
   mode: '0644'
  notify:
    - Reload the systemd daemon
    - pidmr service restart and enable
    - Wait a few seconds for the service to wake up
  tags:
    - pidmr
    - pidmr-update
    - pidmr-service_file


- name: "Create {{ pidmr_root_dir }} directory if it does not exist"
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ pidmr_user }}"
    group: "{{ pidmr_group }}"
    mode: '0755'
  loop:
    - "{{ pidmr_root_dir }}"
  tags:
    - pidmr
    - pidmr-directories

- name: "Create pid metaresolver service logs directory if it doesn't exist"
  file:
    path: "{{ pidmr_logs_dir }}"
    state: directory
    owner: root
    group: root
    mode: '0700'
  tags:
    - pidmr
    - pidmr-directories


- name: Find the artifact of the last successful build
  uri:
    url: https://{{ jenkins.host }}/job/{{ jenkins.job }}/job/{{ jenkins.repository }}/job/{{ jenkins.branch }}/lastSuccessfulBuild/api/json
    user: "{{ jenkins.user }}"
    password: "{{ jenkins.password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
  register: _jenkins_results
  tags:
    - pidmr
    - pidmr-jenkins
    - pidmr-jar
    - pidmr-update

- name: Download the latest Jenkins artifact
  get_url:
    url: https://{{ jenkins.host }}/job/{{ jenkins.job }}/job/{{ jenkins.repository }}/job/{{ jenkins.branch }}/lastSuccessfulBuild/artifact/{{ _jenkins_results.json.artifacts[0].relativePath }}
    dest: "{{ pidmr_root_dir }}/pidmr.jar"
    username: "{{ jenkins.user }}"
    password: "{{ jenkins.password }}"
    force_basic_auth: yes
    owner: "{{ pidmr_user }}"
    group: "{{ pidmr_group }}"
    mode: '0744'
    backup: yes
  notify:
    - pidmr service restart and enable
    - Wait a few seconds for the service to wake up
  tags:
    - pidmr
    - pidmr-jar
    - pidmr-update

- name: Download config files.
  get_url:
    url: "{{ item }}"
    dest: "{{ pidmr_conf_dir }}"
  loop:
    - https://raw.githubusercontent.com/ARGOeu/fc4eosc-PIDMR-api/devel/files/actions.conf
    - https://raw.githubusercontent.com/ARGOeu/fc4eosc-PIDMR-api/devel/files/metaresolvers.conf
    - https://raw.githubusercontent.com/ARGOeu/fc4eosc-PIDMR-api/devel/files/providers.conf
  tags:
    - pidmr
    - pidmr:config
    - pidmr:update

- name: Recursively change ownership of the pid metaresolver service directories
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    owner: "{{ pidmr_user }}"
    group: "{{ pidmr_group }}"
  loop:
    - "{{ pidmr_root_dir }}"
  tags:
    - pidmr
    - pidmr-directories
    - pidmr-update


- name: Create rsyslog filter for pid metaresolver service logs
  template:
    src: etc/rsyslog.d/71_pidmr.conf.j2
    dest: /etc/rsyslog.d/71_pidmr.conf
    backup: yes
    owner: root
    group: root
    mode: '0644'
  notify:
    - restart rsyslog
  tags:
    - pidmr
    - pidmr-logs
    - pidmr-rsyslog


- meta: flush_handlers


- name: More about pid metaresolver service.
  debug:
    msg:
    - https://github.com/ARGOeu/fc4eosc-PIDMR-api/tree/devel
  tags:
    - pidmr
    - pidmr-check
